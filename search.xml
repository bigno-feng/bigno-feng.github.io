<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ssh隧道技术]]></title>
    <url>%2F2019%2F04%2F08%2Fssh%E9%9A%A7%E9%81%93%2F</url>
    <content type="text"><![CDATA[ssh隧道技术(别名: ssh端口转发)分为以下三种 本地端口转发 (Local) 远程端口转发 (Remote) 动态端口转发 (Dynamic) 本地端口转发 先准备好应用环境: Server A Server B Client A S_A上有mysql，S_B可以访问S_A, C_A可以访问S_B,现在我们要C_A访问S_A上的msyql服务 现在我们需要在ServerA和ServerB之间建立一条ssh隧道，让ClientA可以通过ServerB访问ServerA的mysql服务 运行如下命令:ssh -L 9906:ServerA_IP:3006 root@ServerA_IP这样就实现了访问ServerB的9906端口等于访问了ServerA的3306端口 不过这样只会监听本地回环的9906端口,也就是说只能在ServerB本地来访问这个端口 如果要从ClientA访问ServerB的9906端口，需要把9906端口对外开放，有两种方案: ssh -g -L 9906:ServerA_IP:3306 root@ServerA_IP ssh -L 0.0.0.0:9906:ServerA_IP:3306 root@ServerA_IP 而在实际使用过程中，我们往往会建立隧道后，退出当前ssh会话，所以，上述命令并不能满足我们的需求，因为，一旦退出ssh会话，隧道也随之关闭，这时候我们来加上 -N 和 -f 参数，来使ssh隧道后台运行ssh -Nf -L 0.0.0.0:9906:ServerA_IP:3306 root@Serer_IP 远程端口转发(内网穿透技术,很实用) 同样准备好环境:箭头表示允许访问的方向，也就是说 ServerC可以访问ServerB,ServerA和ClientA ClientB和ClientC可以访问ClientA 第一个小目标ClientB访问ServerC的22端口实现步骤：1.ClientA需要修改一下sshd_config,开启GatewayPorts,这样才能监听回环地址以外的地址123vim /etc/ssh/sshd_config增加 GatewayPorts yessystemctl reload sshd 2.ServerC和ClientA建立ssh隧道，让ClientA在0.0.0.0上监听9080端口，使访问这个端口的数据转发到ServerC的22端口上12//在ServerC上运行如下命令ssh -R 0.0.0.0:9080:localhost:22 root@CA_IP 3.通过ClintA的9080端口来登录ServerCssh root@CA_IP -p 9080 第二个小目标ClientB访问ServerA很简单，因为ServerC可以直接访问ServerA和ClientA,所以通过ServerC把ServerA的22端口转发到ClientA的9080端口就可以12//还是在ServerC上运行ssh -R 0.0.0.0:9080:SA_IP:22 root@CA_IP 第三个小目标ServerA访问ClientC这就需要经过多层ssh隧道才能实现1.ClientA需要改ssh_config，使端口能被外网访问2.ClientC把自己的22端口反向转发到ClientA,使外网通过ClientA的9999端口可以访问ClientC的22端口12//ClientC上运行ssh -R 0.0.0.0:9999:CC_IP:22 root@CC_IP 3.因为ServerC可以访问ClientA和ServerA，所以通过ServerC把ClientA的9999端口转发到ServerA的8080端口12//ServerC上运行ssh -R 0.0.0.0:8080:CA_IP:9999 root@SA_IP 4.现在可以在serverA本地通过8080端口访问ClientC的22端口了1ssh root@127.0.0.1 -p 8080 应用场景1.客户要把项目部署在外网测试，可是外网服务器因为内存不足之类的原因，无法再部署项目，这时候就可以把项目部署在自己的电脑上，然后通过远程转发，把自己的端口转发到外网端口上，客户就可以通过外网端口来访问项目了，而且项目也部署在自己电脑上 2.在家里想要访问公司内网服务器，就可以在内网服务器把22端口转发到外网服务器上，然后在家里就可以爽歪歪的连接公司内网服务器了 动态转发1ssh -fN -D 8888 root@Server_IP 通过Server的8888端口代理上网(科学上网,翻墙),不做过多讲解]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown-HTML标签]]></title>
    <url>%2F2019%2F04%2F03%2Fmarkdown-10%2F</url>
    <content type="text"><![CDATA[常用弥补Markdown的HTML标签1.字体与颜色12&lt;font face=&quot;微软雅黑&quot; color=&quot;red&quot; size=&quot;4&quot;&gt;字体及字体颜色和大小&lt;/font&gt;&lt;font color=&quot;#0000ff&quot;&gt;字体颜色&lt;/font&gt; 字体及字体颜色和大小字体颜色 2.换行1使用html标签 &lt;br&gt; 换行 3.文本对齐方式123&lt;p align=&quot;left&quot;&gt;居左文本&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;居中文本&lt;/p&gt;&lt;p align=&quot;right&quot;&gt;居右文本&lt;/p&gt; 居左文本居中文本居右文本 4.下划线1&lt;u&gt;下划线&lt;/u&gt; 下划线 5.任务列表1234- [ ] [links](), **formatting**, and ~~tags~~ supported- [x] list syntax required (any unordered or ordered list supported)- [ ] this is a complete item- [x] this is an incomplete item links, formatting, and tags supported list syntax required (any unordered or ordered list supported) this is a complete item this is an incomplete item]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown-脚注|注解，注释]]></title>
    <url>%2F2019%2F04%2F03%2Fmarkdown-9%2F</url>
    <content type="text"><![CDATA[脚注|注解，注释1.脚注|注解12这是一个脚注的例子 [^1][^1]: 这里是脚注，我在文章最底下 这是一个脚注的例子 [^1][^1]: 这里是脚注，我在文章最底下 2.注释 注释是给自己看的，预览时也不会出现，当然发布出去别人也看不见 1&lt;!-- 注释 --&gt;]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown-分割线]]></title>
    <url>%2F2019%2F04%2F03%2Fmarkdown-8%2F</url>
    <content type="text"><![CDATA[分割线1234***---___* * *]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown-表格]]></title>
    <url>%2F2019%2F04%2F03%2Fmarkdown-7%2F</url>
    <content type="text"><![CDATA[表格 (Table) 表格对齐格式居左: :—居中: :—:居右: —: 123|标题|标题|标题||:---|:---:|---:||居左|居中|居右| 标题 标题 标题 居左 居中 居右]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown-代码块]]></title>
    <url>%2F2019%2F04%2F03%2Fmarkdown-6%2F</url>
    <content type="text"><![CDATA[代码块 (Code blocks) 代码分为行内代码和代码块 1.行内代码 行内代码使用 标识,可嵌入文字内 需要引用代码时，如果引用的语句只有一段，不分行，可以用 将语句包起来 1`Hello World` Hello World 2.代码块123``` key代码代码``` //加上对应的key，能使对应的代码高亮 java代码: 123public void hello() &#123; system.out.print("Hello World");&#125; 语言与key对照表 language key Bash bash C++ cpp C# cs CSS css Erlang erlang Go go Gradle gradle Groovy groovy HTML html Java java JavaScript javascript Json json Lua lua Python python Ruby ruby SQL sql]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown-图片与链接]]></title>
    <url>%2F2019%2F04%2F03%2Fmarkdown-5%2F</url>
    <content type="text"><![CDATA[图片与链接 (Images &amp; Links) 图片与链接的语法很像， 区别在一个!上注: Markdown不能设置图片大小，如果必须设置则使用HTML标记 12345图片: ![]() ![图片描述，可忽略](链接地址)链接: []() [链接表述](链接地址)![黄狗头](http://image.bignof.com/狗头.jpg)[黄狗头](http://image.bignof.com/狗头.jpg) 黄狗头]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown-文字样式]]></title>
    <url>%2F2019%2F04%2F02%2Fmarkdown-4%2F</url>
    <content type="text"><![CDATA[文字样式 (Text Styling)1.基本语法12345**加粗文本** 或者 __加粗文本__ 两个下划线*斜体文本* 或者 _斜体文本_***斜粗体*** 或者 ___斜粗体___~~删除文本~~`底纹` 加粗文本 或者 加粗文本 两个下划线斜体文本 或者 斜体文本斜粗体 或者 斜粗体删除文本底纹 2.非基本语法12这是&lt;sup&gt;上标文字&lt;/sup&gt;这是&lt;sub&gt;下标文字&lt;/sub&gt; 这是上标文字这是下标文字]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown-列表]]></title>
    <url>%2F2019%2F04%2F02%2Fmarkdown-3%2F</url>
    <content type="text"><![CDATA[列表 (Lists) markdown支持有序列表和无序列表 1.有序列表 (Ordered Lists) 有序列表使用数字加英文句点.来表示:12345671.Red2.Green3.Bluea.Redb.Greenc.Blue 1.Red2.Green3.Blue a.Redb.Greenc.Blue 2.无序列表 (Unordered Lists) 无序列表使用 - , + 和 * 作为列表标记: 123- Red- Green- Blue Red Green Blue 12345678- Red //多级列表 - Red-1 //次级列表在前面多打2个以上空格 * Red-11 * Red-22 - Red-2 - Red-3- Green- Blue Red Red-1 Red-11 Red-22 Red-2 Red-3 Green Blue]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown-引用]]></title>
    <url>%2F2019%2F04%2F02%2Fmarkdown-2%2F</url>
    <content type="text"><![CDATA[引用（Reference) 很好用的功能 引用以&gt;来表示，引用中支持多级引用、标题、列表、代码块、分割线等常规语法 1.常见的引用语法123&gt; 这是一段引用 //在&apos;&gt;&apos;后面有1个空格&gt;&gt; 这是引用的代码块 //在&apos;&gt;&apos;后面有5个空格 这是一段引用 这是引用的代码块 12345&gt; 代码例子:&gt; public void test() &#123; system.out.print(&quot;Hello World&quot;); &#125; 代码例子: public void test() { system.out.print(&quot;Hello World&quot;); } 2.分级引用123&gt; 一级引用&gt; &gt; 二级引用&gt; &gt; &gt; 三级引用 一级引用 二级引用 三级引用 123&gt; #### 这是一个四级标题 //引用中可以使用各种语法&gt; - 无序列表1&gt; - 无序列表2 这是一个四级标题 无序列表1 无序列表2]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown-标题]]></title>
    <url>%2F2019%2F04%2F02%2Fmarkdown%2F</url>
    <content type="text"><![CDATA[标题 (Headers) markdown支持六级标题 123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 一级标题二级标题三级标题四级标题五级标题六级标题]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ssh保持长连接的方式]]></title>
    <url>%2F2019%2F04%2F02%2Fssh%2F</url>
    <content type="text"><![CDATA[方法有一下三种1.修改server端的etc/ssh/sshd_config1ClientAliveInterval 60 server每隔60秒发送一次请求给client，然后client响应，从而保持连接 1ClientALiveCountMax 3 server发出请求后，客户端没有响应得次数达到3，就自动断开连接，正常情况下，client不会不响应 1systemctl reload sshd 2.修改client端的etc/ssh/ssh_config添加以下：（在没有权限改server配置的情形下）1ServerAliveInterval 60 client每隔60秒发送一次请求给server，然后server响应，从而保持连接 1ServerAliveCountMax 3 client发出请求后，服务器端没有响应得次数达到3，就自动断开连接，正常情况下，server不会不响应 3.ssh连接时在命令参数里 ssh -o ServerAliveInterval=60 这样子只会在需要的连接中保持持久连接， 毕竟不是所有连接都要保持持久的]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ssh</tag>
        <tag>sshd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS7中firewalld的基本使用]]></title>
    <url>%2F2019%2F04%2F01%2Ffirewalld%2F</url>
    <content type="text"><![CDATA[1.systemctl命令的基本使用systemctl是CentOS7的服务管理工具,它融合了service和chkconfig的功能于一体启动服务: systemctl start firewalld关闭服务: systemctl stop firewalld重启服务: systemctl restart firewalld查看服务状态: systemctl status firewalld开机自启动: systemctl enable firewalld开机禁止: systemctl disable firewalld查看是否开机自启动: systemctl is-enabled firewalld查看已启动的服务列表: systemctl list-unit-files | grep enabled查看启动失败的服务列表: systemctl –failed 2.firewalld命令的基本使用查看版本: firewall-cmd –version查看帮助: firewall-cmd –help显示状态: firewall-cmd –state 查看区域信息: firewall-cmd –get-active-zones查看指定接口所属区域: firewall-cmd –get-zone-of-interface=eth0 拒绝所有包: firewall-cmd –panic-on取消拒绝状态: firewall-cmd –panic-off查看是否拒绝: firewall-cmd –query-panic 3.firewalld开启与关闭端口查看所有打开的端口: firewall-cmd –zone=public –list-ports更新防火墙规则: firewall-cmd –reload 每次更改端口需要执行此命令 permanent参数，永久生效，没有此参数重启后失效添加端口: firewall-cmd –zone=public –add-port=8080/tcp –permanenet删除端口: firewall-cmd –zone=public –remove-port=8080/tcp –permanent查看端口: firewall-cmd –zone=public –query-port=8080/tcp]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>firewalld</tag>
        <tag>linux</tag>
        <tag>centos</tag>
      </tags>
  </entry>
</search>
